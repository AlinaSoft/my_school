<?php

namespace AppBundle\Repository;
use AppBundle\Entity\UserTraining;
/**
 * UserTrainingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserTrainingRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByID($userId,$trainingId)
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppBundle:UserTraining p Where p.userId= ' . $userId.' AND p.trainingId='.$trainingId
            )
            ->getResult();
    }
    public function setUserInTraining($userId,$trainingId)
    {

        //$em = $this->getDoctrine()->getManager();
        $exist = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppBundle:UserTraining p Where p.userId= ' . $userId.' AND p.trainingId='.$trainingId
            )
            ->getResult();
        if (empty($exist)) {
            $user = new UserTraining();
            $user->setUserId($userId);
            $user->setTrainingId($trainingId);

            $this->getEntityManager()->persist($user);
            $this->getEntityManager()->flush();
            return true;
        }else{
            return true;
        }
    }
    public function getUserTraining($userId)
    {
       $qb = $this->createQueryBuilder('p');
        $qb->leftJoin('AppBundle:Training t on p.trainingId = t.id')
           ->where('p.userId = :userId')
        ->setParameter('userId', $userId);
        return $qb->getQuery()->getResult();

    }
    public function cancelUserTraining($userId, $trainingId)
    {
        return $this->getEntityManager()
            ->createQuery(
                'Delete FROM AppBundle:UserTraining p Where p.userId= ' . $userId .' AND p.trainingId='.$trainingId
            )
            ->getResult();
    }
    public function getUserCount()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT COUNT(p) as TrainingUserCount FROM AppBundle:UserTraining p '
            )
            ->getResult();
    }

}
